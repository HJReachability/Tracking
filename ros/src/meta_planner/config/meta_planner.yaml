meta:
  sensor:
    # Time step for simulator.
    time_step: 0.005

    # Sensor radius.
    sensor_radius: 2.5

    # Number of obstacles.
    num_obstacles: 25

    # Min/max obstacle radius.
    min_obstacle_radius: 0.4
    max_obstacle_radius: 0.5

  random:
    # Random seed for environment.
    seed: 0

  control:
    # Interval (seconds) of the discrete-time control update.
    time_step: 0.01

    # Control dimension.
    dim: 3

    # Upper and lower bounds for control.
    # In the quadrotor 6D model, the controls are [pitch, roll, thrust].
    #upper: [0.2618, 0.2618, 15.62] # thrust limits symmetric w.r.t. g = 9.81
    #lower: [-0.2618, -0.2618, 4.0]
    upper: [ 0.15,  0.15, 11.81] # 15.62 # thrust limits symmetric w.r.t. g = 9.81
    lower: [-0.15, -0.15, 7.81 ] # 4.0

  state:
    # Full (tracker) state space dimension.
    dim: 6

    # Upper and lower bounds for state space.
    # In the quadrotor 6D model, state is [x, y, z, vx, vy, vz].
    upper: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    lower: [-10.0, -10.0, 0.0, -10.0, -10.0, -10.0]

  planners:
    # Mode flag. If true, loads value functions from disk.
    # If false, uses analytical versions with parameters given here.
    numerical_mode: false

    # Directories in which subsystem value functions are stored.
    # These are assumed to be in the PRECOMPUTATION_DIR directory, and to
    # end in a '/' so that raw filenames can be concatenated directly.
    value_directories: [speed_1_tenths/]

    # Planner max speed and velocity/acceleration disturbances. All values are
    # assumed to be the same in eadh dimension, so each entry in these lists is
    # for a different
    max_speeds: [0.7, 0.4]
    max_velocity_disturbances: [0.2, 0.2]
    max_acceleration_disturbances: [0.1, 0.1]

  meta:
    # Max runtime for the meta planner in seconds.
    max_runtime: 0.05

    # Max connection radius for meta planner.
    max_connection_radius: 5.0

    # Amount of time to look ahead to detect switching to more cautious planner.
    # NOTE! This lookahead should really be the precise minimum switching time
    # between this planner and the next-most cautious one.
    switching_lookahead: 0.5

  topics:
    # Sensor publication topic.
    sensor: /sensor

    # State estimator topic.
    state: /state

    # Reference to track.
    reference: /reference

    # Trajectory computed by MetaPlanner.
    traj: /traj

    # Trajectory requests.
    request_traj: /request_traj

    # Triggering a replan event.
    trigger_replan: /replan

    # Visualization topics.
    vis:
      traj: /vis/traj
      true_environment: /vis/true_env
      known_environment: /vis/known_env
      tracking_bound: /vis/bound
      sensor_radius: /vis/sensor

    # Control topic.
    control: /control/optimal

  frames:
    # Fixed frame.
    fixed: fixed

    # Tracker frame.
    tracker: tracker

    # Planner frame.
    planner: planner
